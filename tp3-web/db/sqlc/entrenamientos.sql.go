// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entrenamientos.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEntrenamiento = `-- name: CreateEntrenamiento :one

INSERT INTO entrenamiento (usuario_id, fecha, tipo, distancia, tiempo, ritmo_promedio, calorias, notas)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id_entrenamiento, usuario_id, fecha, tipo, distancia, tiempo, ritmo_promedio, calorias, notas
`

type CreateEntrenamientoParams struct {
	UsuarioID     int32          `json:"usuario_id"`
	Fecha         time.Time      `json:"fecha"`
	Tipo          string         `json:"tipo"`
	Distancia     string         `json:"distancia"`
	Tiempo        int32          `json:"tiempo"`
	RitmoPromedio sql.NullString `json:"ritmo_promedio"`
	Calorias      sql.NullInt32  `json:"calorias"`
	Notas         sql.NullString `json:"notas"`
}

// Entrenamientos
func (q *Queries) CreateEntrenamiento(ctx context.Context, arg CreateEntrenamientoParams) (Entrenamiento, error) {
	row := q.db.QueryRowContext(ctx, createEntrenamiento,
		arg.UsuarioID,
		arg.Fecha,
		arg.Tipo,
		arg.Distancia,
		arg.Tiempo,
		arg.RitmoPromedio,
		arg.Calorias,
		arg.Notas,
	)
	var i Entrenamiento
	err := row.Scan(
		&i.IDEntrenamiento,
		&i.UsuarioID,
		&i.Fecha,
		&i.Tipo,
		&i.Distancia,
		&i.Tiempo,
		&i.RitmoPromedio,
		&i.Calorias,
		&i.Notas,
	)
	return i, err
}

const deleteEntrenamiento = `-- name: DeleteEntrenamiento :exec
DELETE FROM entrenamiento
WHERE id_entrenamiento = $1
`

func (q *Queries) DeleteEntrenamiento(ctx context.Context, idEntrenamiento int32) error {
	_, err := q.db.ExecContext(ctx, deleteEntrenamiento, idEntrenamiento)
	return err
}

const getEntrenamientoByID = `-- name: GetEntrenamientoByID :one
SELECT id_entrenamiento, usuario_id, fecha, tipo, distancia, tiempo, ritmo_promedio, calorias, notas FROM entrenamiento
WHERE id_entrenamiento = $1
`

func (q *Queries) GetEntrenamientoByID(ctx context.Context, idEntrenamiento int32) (Entrenamiento, error) {
	row := q.db.QueryRowContext(ctx, getEntrenamientoByID, idEntrenamiento)
	var i Entrenamiento
	err := row.Scan(
		&i.IDEntrenamiento,
		&i.UsuarioID,
		&i.Fecha,
		&i.Tipo,
		&i.Distancia,
		&i.Tiempo,
		&i.RitmoPromedio,
		&i.Calorias,
		&i.Notas,
	)
	return i, err
}

const getEntrenamientos = `-- name: GetEntrenamientos :many
SELECT id_entrenamiento, usuario_id, fecha, tipo, distancia, tiempo, ritmo_promedio, calorias, notas FROM entrenamiento
`

func (q *Queries) GetEntrenamientos(ctx context.Context) ([]Entrenamiento, error) {
	rows, err := q.db.QueryContext(ctx, getEntrenamientos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entrenamiento
	for rows.Next() {
		var i Entrenamiento
		if err := rows.Scan(
			&i.IDEntrenamiento,
			&i.UsuarioID,
			&i.Fecha,
			&i.Tipo,
			&i.Distancia,
			&i.Tiempo,
			&i.RitmoPromedio,
			&i.Calorias,
			&i.Notas,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntrenamientosByUsuario = `-- name: GetEntrenamientosByUsuario :many
SELECT id_entrenamiento, usuario_id, fecha, tipo, distancia, tiempo, ritmo_promedio, calorias, notas FROM entrenamiento
WHERE usuario_id = $1
ORDER BY fecha DESC
`

func (q *Queries) GetEntrenamientosByUsuario(ctx context.Context, usuarioID int32) ([]Entrenamiento, error) {
	rows, err := q.db.QueryContext(ctx, getEntrenamientosByUsuario, usuarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entrenamiento
	for rows.Next() {
		var i Entrenamiento
		if err := rows.Scan(
			&i.IDEntrenamiento,
			&i.UsuarioID,
			&i.Fecha,
			&i.Tipo,
			&i.Distancia,
			&i.Tiempo,
			&i.RitmoPromedio,
			&i.Calorias,
			&i.Notas,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntrenamiento = `-- name: UpdateEntrenamiento :one
UPDATE entrenamiento
SET fecha = $2, tipo = $3, distancia = $4, tiempo = $5, ritmo_promedio = $6, calorias = $7, notas = $8
WHERE id_entrenamiento = $1
RETURNING id_entrenamiento, usuario_id, fecha, tipo, distancia, tiempo, ritmo_promedio, calorias, notas
`

type UpdateEntrenamientoParams struct {
	IDEntrenamiento int32          `json:"id_entrenamiento"`
	Fecha           time.Time      `json:"fecha"`
	Tipo            string         `json:"tipo"`
	Distancia       string         `json:"distancia"`
	Tiempo          int32          `json:"tiempo"`
	RitmoPromedio   sql.NullString `json:"ritmo_promedio"`
	Calorias        sql.NullInt32  `json:"calorias"`
	Notas           sql.NullString `json:"notas"`
}

func (q *Queries) UpdateEntrenamiento(ctx context.Context, arg UpdateEntrenamientoParams) (Entrenamiento, error) {
	row := q.db.QueryRowContext(ctx, updateEntrenamiento,
		arg.IDEntrenamiento,
		arg.Fecha,
		arg.Tipo,
		arg.Distancia,
		arg.Tiempo,
		arg.RitmoPromedio,
		arg.Calorias,
		arg.Notas,
	)
	var i Entrenamiento
	err := row.Scan(
		&i.IDEntrenamiento,
		&i.UsuarioID,
		&i.Fecha,
		&i.Tipo,
		&i.Distancia,
		&i.Tiempo,
		&i.RitmoPromedio,
		&i.Calorias,
		&i.Notas,
	)
	return i, err
}
