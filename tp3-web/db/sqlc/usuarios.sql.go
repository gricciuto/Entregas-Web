// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: usuarios.sql

package db

import (
	"context"
)

const createUsuario = `-- name: CreateUsuario :one

INSERT INTO usuario (nombre, email, contraseña)
VALUES ($1, $2, $3)
RETURNING id_usuario, nombre, email, "contraseña"
`

type CreateUsuarioParams struct {
	Nombre     string `json:"nombre"`
	Email      string `json:"email"`
	Contraseña string `json:"contraseña"`
}

// Usuarios
func (q *Queries) CreateUsuario(ctx context.Context, arg CreateUsuarioParams) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, createUsuario, arg.Nombre, arg.Email, arg.Contraseña)
	var i Usuario
	err := row.Scan(
		&i.IDUsuario,
		&i.Nombre,
		&i.Email,
		&i.Contraseña,
	)
	return i, err
}

const deleteUsuario = `-- name: DeleteUsuario :exec
DELETE FROM usuario
WHERE id_usuario = $1
`

func (q *Queries) DeleteUsuario(ctx context.Context, idUsuario int32) error {
	_, err := q.db.ExecContext(ctx, deleteUsuario, idUsuario)
	return err
}

const getUsuarioByEmail = `-- name: GetUsuarioByEmail :one
SELECT id_usuario, nombre, email, "contraseña" FROM usuario
WHERE email = $1
`

func (q *Queries) GetUsuarioByEmail(ctx context.Context, email string) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, getUsuarioByEmail, email)
	var i Usuario
	err := row.Scan(
		&i.IDUsuario,
		&i.Nombre,
		&i.Email,
		&i.Contraseña,
	)
	return i, err
}

const getUsuarioByID = `-- name: GetUsuarioByID :one
SELECT id_usuario, nombre, email, "contraseña" FROM usuario
WHERE id_usuario = $1
`

func (q *Queries) GetUsuarioByID(ctx context.Context, idUsuario int32) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, getUsuarioByID, idUsuario)
	var i Usuario
	err := row.Scan(
		&i.IDUsuario,
		&i.Nombre,
		&i.Email,
		&i.Contraseña,
	)
	return i, err
}

const getUsuarios = `-- name: GetUsuarios :many
SELECT id_usuario, nombre, email, "contraseña" FROM usuario
`

func (q *Queries) GetUsuarios(ctx context.Context) ([]Usuario, error) {
	rows, err := q.db.QueryContext(ctx, getUsuarios)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usuario
	for rows.Next() {
		var i Usuario
		if err := rows.Scan(
			&i.IDUsuario,
			&i.Nombre,
			&i.Email,
			&i.Contraseña,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
